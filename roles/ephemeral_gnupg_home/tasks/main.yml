---

- name: Decide whether to create an ephemeral GnuPG home
  run_once: true
  set_fact:
    # Detect the nesting level of this role to skip doing anything except
    # during the outer-most invocations
    ansible_vault_gnupg_home_nesting_level: "{{ (ansible_vault_gnupg_home_nesting_level|default(0)|int) + 1}}"

- run_once: true
  when: ansible_vault_gnupg_home_nesting_level|int == 1
  block:
    - name: Create ephemeral GnuPG home
      bbcrd.ansible_vault.create_ephemeral_gnupg_home:
        set_fact: ansible_vault_gnupg_home
      changed_when: false  # Don't pollute change logs
    
    # The create_ephemeral_gnupg_home module will try to gracefully shut down
    # any existing gpg-agent instances so in an ideal world this wouldn't be
    # necessary. Unfortunately, gpg-agents belonging to long-forgotten
    # temporary GnuPG homes which weren't correctly cleaned up cannot be
    # gracefully shut down, hence this step.
    - name: Stop any existing gpg-agents
      delegate_to: localhost
      become: false
      command:
        argv: ["killall", "gpg-agent"]
      changed_when: false
      failed_when: false
    
    - name: Import public keys
      bbcrd.ansible_vault.pgp_import:
        public_key: "{{ item.value.ansible_vault_pgp_public_key }}"
        gnupg_home: "{{ ansible_vault_gnupg_home }}"
      when: item.value.ansible_vault_pgp_public_key is defined
      loop: |-
        {{ ansible_vault_administrators | dict2items }}
      loop_control:
        label: "{{ item.key }}"
      changed_when: false  # Don't pollute change logs
    
    - name: Detect PGP card
      bbcrd.ansible_vault.pgp_detect_card:
        gnupg_home: "{{ ansible_vault_gnupg_home }}"
      changed_when: false  # Don't pollute change logs
