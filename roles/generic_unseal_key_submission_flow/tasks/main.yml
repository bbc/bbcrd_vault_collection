---

# All of vault's unesal key submission APIs follow almost exactly the same
# pattern. Unfortunately there are a few minor differences which make the
# implementation below slightly scruffier.  Those differences are:
# 
# * The unseal API doesn't use a nonce (but the others do).
# * The generate-root API reports the number of unseal keys required via the
#   'required' key (others use the 't' key).
# * The unesal API indicates completeness by setting 'sealed' to false (others
#   report completion by setting 'complete' to true.

- name: Fetch unseal key submission state
  uri:
    url: "{{ status_api_url }}"
    ca_path: "{{ bbcrd_vault_ca_path | default(omit) }}"
  register: status

- name: Work out how many unseal keys are required
  set_fact:
    remaining: |-
      {{
        status.json.required | default(status.json.t)
        - status.json.progress
      }}

- name: Submitting initial unseal keys
  no_log: "{{ bbcrd_vault_no_log_sensitive }}"
  uri:
    url: "{{ submit_api_url }}"
    method: POST
    body_format: json
    body:
      key: "{{ item }}"
      nonce: "{{ nonce if nonce is not none else omit }}"
    ca_path: "{{ bbcrd_vault_ca_path | default(omit) }}"
  # We must save an unseal key to supply as the final required key (the first
  # subscript makes sure we save one of our keys and the second makes sure we
  # don't submit more than the threshold!)
  loop: "{{ (bbcrd_vault_unseal_keys or [])[:-1][:(remaining | int) - 1] }}"
  loop_control:
    index_var: idx
    label: "{{ idx }}"

- name: Fetch updated unseal key submission state
  uri:
    url: "{{ status_api_url }}"
    ca_path: "{{ bbcrd_vault_ca_path | default(omit) }}"
  register: status

- name: Work out how many more unseal keys are required
  set_fact:
    remaining: |-
      {{
        status.json.required | default(status.json.t)
        - status.json.progress
      }}

- name: Run bbcrd_vault_provide_additional_unseal_keys_tasks tasks
  when:
    - bbcrd_vault_provide_additional_unseal_keys_tasks is not none
    - (remaining | int) - 1 > 0
  include_tasks: "{{ bbcrd_vault_provide_additional_unseal_keys_tasks or 'nop.yml' }}"
  vars:
    required: "{{ (remaining | int) - 1 }}"

- name: >-
    Waiting for {{ (remaining | int) - 1 }} additional
    unseal key(s) to be provided {{ purpose }} {% if nonce is not none %}with
    nonce {{ nonce }}{% endif %}
  uri:
    url: "{{ status_api_url }}"
    ca_path: "{{ bbcrd_vault_ca_path | default(omit) }}"
  retries: 9999999  # ~forever
  delay: 10
  until: >-
    (status.status == 200 and status.json.progress > item)
    or (status.status == 200 and nonce is not none and status.json.nonce != nonce)
  # Make sure nonce is the one we expected!
  failed_when: >-
    status.status != 200
    or (nonce is not none and status.json.nonce != nonce)
  loop: "{{ range((remaining | int) - 1) }}"
  loop_control:
    label: "Received {{ item + 1 }} of {{ (remaining | int) - 1 }}"
  register: status

- name: Submit final unseal key
  no_log: "{{ bbcrd_vault_no_log_sensitive }}"
  uri:
    url: "{{ submit_api_url }}"
    method: POST
    body_format: json
    body:
      key: "{{ bbcrd_vault_unseal_keys[-1] }}"
      nonce: "{{ nonce if nonce is not none else omit }}"
    ca_path: "{{ bbcrd_vault_ca_path | default(omit) }}"
  # Make sure nonce is the one we expected and that we really did submit the
  # final key
  failed_when: >-
    submission.status != 200
    or (nonce is not none and submission.json.nonce != nonce)
    or (
      (
        not (submission.json.complete | default(False))
        and (submission.json.sealed | default(True))
      ) and check_complete
    )
  register: submission
