---

# This set of tasks implements the generic flow in which unseal keys are
# presented to a vault API.
#
# The following variables must be set:
#
#   ansible_vault_unseal_key -- A valid unseal key
#   nonce -- The nonce for the submission process. If null, no nonce is used
#            (or checked for).
#   status_api_url -- The API endpoint to poll to monitor the status of key
#                     submission.
#   submit_api_url -- The API endpoint to POST the final unseal key to.
#   purpose -- A human readable string stating what the unseal keys are being
#              used for (e.g. 'to unseal vault' or 'for verification')
#   check_complete -- (Optional, default = true). If set to False, skips check
#                     that the unseal flow reported completeness in its final
#                     step. This may be useful when joining new nodes to the
#                     cluster which don't immediately report unsealed.
#
# If these requests should be sent to only one host (rather than all hosts),
# you must wrap the `import_tasks` task in a run_once block.
#
# On completing these tasks, the following variables will be set:
#
#   submission.json -- The JSON response from the final submit API call.
#
# The process begins by waiting for all but one unseal key to be presented (by
# other people). The final unseal key (which must be set in
# ansible_vault_unseal_key) is then presented to the API.
#
# The reason for waiting to be the last person to insert an unseal key is that
# some APIs will offer up their output to whoever provides the final unseal
# key. For example, an (encrypted) root token during generate-root or new
# unseal keys (during rekeying). To avoid having to deal with these values
# being passed human-to-human, by waiting until last we can capture the values
# immediately.
#
# All of vault's unesal key submission APIs follow almost exactly the same
# patterns -- hence this flow being factored out here. Unfortunately there are
# a few minor differences which make the implementation below slightly
# scruffier. Those differences are:
#
# * The unseal API doesn't use a nonce (but the others do).
# * The generate-root API reports the number of unseal keys required via the
#   'required' key (others use the 't' key).
# * The unesal API indicates completeness by setting 'sealed' to false (others
#   report completion by setting 'complete' to true.

- name: Fetch unseal key submission state
  uri:
    url: "{{ status_api_url }}"
    ca_path: "{{ ansible_vault_ca_path | default(omit) }}"
  register: status

- name: >-
    Waiting for {{
      (
        status.json.t | default(status.json.required)
        - status.json.progress
        - 1
      )
    }} additional unseal key(s) to be provided {{ purpose }}
    {% if nonce is not none %}
    with nonce {{ nonce }}
    {% endif %}
  uri:
    url: "{{ status_api_url }}"
    ca_path: "{{ ansible_vault_ca_path | default(omit) }}"
  retries: 9999999  # ~forever
  delay: 10
  until: >-
    (status.status == 200 and status.json.progress >= item)
    or (status.status == 200 and nonce is not none and status.json.nonce != nonce)
  # Make sure nonce is the one we expected!
  failed_when: >-
    status.status != 200
    or (nonce is not none and status.json.nonce != nonce)
  loop: "{{ range((status.json.t | default(status.json.required)) - 1) }}"
  register: status

- name: Submit final unseal key
  no_log: "{{ ansible_vault_no_log_sensitive }}"
  uri:
    url: "{{ submit_api_url }}"
    method: POST
    body_format: json
    body:
      key: "{{ ansible_vault_unseal_key }}"
      nonce: "{{ nonce if nonce is not none else omit }}"
    ca_path: "{{ ansible_vault_ca_path | default(omit) }}"
  # Make sure nonce is the one we expected and that we really did submit the
  # final key
  failed_when: >-
    submission.status != 200
    or (nonce is not none and submission.json.nonce != nonce)
    or (
      (
        not (submission.json.complete | default(False))
        and (submission.json.sealed | default(True))
      ) and check_complete | default(True)
    )
  register: submission
