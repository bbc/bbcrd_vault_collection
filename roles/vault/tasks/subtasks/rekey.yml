---
# Rekey the unseal keys if the set of users/PGP keys has changed

- name: Fetch encrypted unseal keys
  import_role:
    name: bbcrd.ansible_vault.fetch_encrypted_unseal_keys

- name: Enumerate PGP keys used
  run_once: true
  set_fact:
    existing_fingerprints_and_names: |-
      {{
        encrypted_unseal_keys.shares | map(attribute="fingerprint")
          | zip(encrypted_unseal_keys.shares | map(attribute="name"))
          | map("join", " -- ")
          | sort
      }}
    
    new_fingerprints_and_names: |-
      {{
        pgp_key_fingerprints
          | zip(pgp_key_names)
          | map("join", " -- ")
          | sort
      }}

- name: Rekey the Vault unseal keys if the keyholders have changed
  when: >-
    existing_fingerprints_and_names != new_fingerprints_and_names
    or ansible_vault_force_rekey
  any_errors_fatal: true
  block:
    - name: Show diff of unseal key holders
      run_once: true
      debug:
        msg: |-
          {{
            (existing_fingerprints_and_names | ndiff(new_fingerprints_and_names))
            if existing_fingerprints_and_names != new_fingerprints_and_names else
            "(unseal key holders not changed)"
          }}
    
    - name: Confirm changes
      run_once: true
      when: >-
        existing_fingerprints_and_names != new_fingerprints_and_names
        and not ansible_vault_skip_confirm_rekey_changes
      pause:
        prompt: "Rekey with new list of keys (see above)? y/N"
      register: confirm
      failed_when: (confirm.user_input.strip().lower()) not in ["y", "yes"]
    
    # This check is performed to ensure that we end up writing the newly
    # rotated keys to all members of the server. It is not a technical
    # requirement of the rekeying process.
    - name: Sanity check that all servers in the cluster are up
      run_once: true
      when: not ansible_vault_skip_rekey_sanity_check
      assert:
        that: |-
          (ansible_play_hosts | length) == (groups[ansible_vault_cluster_ansible_group_name] | length)
        quiet: true
        fail_msg: "All cluster members must be up or ansible_vault_skip_rekey_sanity_check set to true."
    
    - name: Obtain unseal key
      import_tasks: obtain_unseal_key.yml
    
    - name: Perform rekeying on one host
      run_once: true
      block:
        - name: Cancel any previous rekeying operation
          uri:
            # vault operator generate-root -cancel ...
            url: "{{ ansible_vault_public_url }}/v1/sys/rekey/init"
            method: DELETE
            ca_path: "{{ ansible_vault_ca_path | default(omit) }}"
            status_code: [200, 204]  # OK or No Content
        
        - name: Begin rekeying operation
          no_log: "{{ ansible_vault_no_log_sensitive }}"
          uri:
            # vault operator rekey -init ...
            url: "{{ ansible_vault_public_url }}/v1/sys/rekey/init"
            method: POST
            body_format: json
            # Note: Whilst we don't use the backup feature in this playbook (it
            # can only be reached once vault is unsealed anyway!) we enable it
            # anyway since it provides an extra (albeit limited) chance to not
            # lose the keys, and there is no real reason not to do it!
            body: |-
              {{
                {
                  "secret_threshold": (ansible_vault_unseal_key_threshold | int),
                  "secret_shares": (pgp_keys | length),
                  "pgp_keys": pgp_keys_base64,
                  "require_verification": ansible_vault_verify_rekey,
                  "backup": True,
                } | to_json
              }}
            ca_path: "{{ ansible_vault_ca_path | default(omit) }}"
          changed_when: true
          register: vault_rekey_init
        
        - name: Supply unseal keys
          import_tasks: generic_unseal_key_flow.yml
          vars:
            purpose: "to rekey vault"
            nonce: "{{ vault_rekey_init.json.nonce }}"
            status_api_url: "{{ ansible_vault_public_url }}/v1/sys/rekey/init"
            # vault operator rekey
            submit_api_url: "{{ ansible_vault_public_url }}/v1/sys/rekey/update"
        
        - name: Clear now out-of-date ansible_vault_unseal_keys
          set_fact:
            ansible_vault_unseal_keys: null
            # NB: We set this as a fact so that we capture the value from the
            # 'submission' variable before we later override it
            verification_nonce: "{{ submission.json.verification_nonce }}"
        
        - name: Create encrypted unseal key bundle
          import_role:
            name: bbcrd.ansible_vault.save_encrypted_unseal_keys
          vars:
            encrypted_unseal_keys_base64: "{{ submission.json.keys_base64 }}"
            encrypted_unseal_keys_filename: |-
              {{
                "encrypted_unseal_keys.json.candidate"
                if ansible_vault_verify_rekey else
                "encrypted_unseal_keys.json"
              }}
    
    # XXX: We need some way to override this in the same way we can avoid use
    # of this mechanism elsewhere.
    - name: "Obtain new candidate unseal key"
      when: ansible_vault_verify_rekey
      import_tasks: obtain_unseal_key.yml
      vars:
        encrypted_unseal_keys_filename: "encrypted_unseal_keys.json.candidate"
        
    - name: Verify new keys
      when: ansible_vault_verify_rekey
      run_once: true
      block:
        - name: Supply new unseal keys for verification
          import_tasks: generic_unseal_key_flow.yml
          vars:
            purpose: "to verify new unseal keys"
            nonce: "{{ verification_nonce }}"
            status_api_url: "{{ ansible_vault_public_url }}/v1/sys/rekey/verify"
            # vault operator rekey -verify ...
            submit_api_url: "{{ ansible_vault_public_url }}/v1/sys/rekey/verify"
        
        - name: "Make candidate unseal keys live"
          run_once: false  # NB: Make sure we put the keys on every node!
          copy:
            src: "{{ ansible_vault_data_dir }}/encrypted_unseal_keys.json.candidate"
            remote_src: true
            dest: "{{ ansible_vault_data_dir }}/encrypted_unseal_keys.json"
            backup: true
          
