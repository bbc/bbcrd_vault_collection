storage "raft" {
  path = "{{ ansible_vault_data_dir }}/data"
  node_id = "{{ inventory_hostname }}"
  
  {%- for host in groups[ansible_vault_cluster_ansible_group_name] +%}
    {%- if host != inventory_hostname +%}
  retry_join {
    leader_api_addr = "{{ hostvars[host]['ansible_vault_public_url'] }}"
      {%- if ansible_vault_ca_path is defined +%}
    leader_ca_cert_file = "{{ ansible_vault_ca_path }}"
      {%- endif +%}
  }
    {%- endif +%}
  {%- endfor +%}
}

listener "tcp" {
  # Vault API endpoint
  address = "{{ ansible_vault_listen_address }}:{{ ansible_vault_listen_port }}"
  
  # Inter-vault-server clustering API endpoint
  cluster_address = "{{ ansible_vault_clustering_address }}:{{ ansible_vault_clustering_port }}"
  
  # API endpoint TLS config
  {%- if ansible_vault_listen_protocol == "https" +%}
  tls_cert_file = "{{ ansible_vault_tls_cert_file }}"
  tls_key_file = "{{ ansible_vault_tls_key_file }}"
  {%- else +%}
  tls_disable = true
  {%- endif +%}
  
  {%- if ansible_vault_x_forwarded_for_authorized_addrs is not none +%}
  # Obtain true client address from reverse proxy X-Forwarded-For headers
  x_forwarded_for_authorized_addrs = "{{ ansible_vault_x_forwarded_for_authorized_addrs | join(',') }}"
  {%- endif +%}
}

api_addr = "{{ ansible_vault_public_url }}"

cluster_addr = "{{ ansible_vault_clustering_url }}"

# Since we're using integrated storage, we should disable mlock since it
# prevents Vault memory mapping the database without the whole file being
# loaded into RAM. It is important, however, to disable swap to prevent
# plaintext data ending up on disk.
disable_mlock = true

ui = {{ "true" if ansible_vault_enable_ui else "false" }}
