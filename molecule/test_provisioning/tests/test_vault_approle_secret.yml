---

- hosts: vault
  tasks:
    - import_tasks: ../load_credentials_and_reset_vault.yml
    
    - name: Enable AppRole auth
      bbcrd.ansible_vault.vault_auth_method:
        type: approle
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
    
    - name: Create a new approle
      bbcrd.ansible_vault.vault_approle:
        name: "my-approle"
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: approle
      failed_when: not approle.changed
    
    - name: Create a secret_id
      bbcrd.ansible_vault.vault_approle_secret:
        approle_name: "my-approle"
        parameters:
          metadata:
            note: "first secret"
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: first_secret
    
    - name: Check secret_id can be used to login
      uri:
        url: "{{ ansible_vault_public_url }}/v1/auth/approle/login"
        method: POST
        body_format: json
        body:
          role_id: "{{ approle.role_id }}"
          secret_id: "{{ first_secret.secret_id }}"
    
    - name: Create a second (custom) secret
      bbcrd.ansible_vault.vault_approle_secret:
        approle_name: "my-approle"
        secret_id: hunter2
        parameters:
          metadata:
            note: "second secret"
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: second_secret
      failed_when: second_secret.secret_id != "hunter2"
    
    - name: Check custom secret_ids can be used to login
      uri:
        url: "{{ ansible_vault_public_url }}/v1/auth/approle/login"
        method: POST
        body_format: json
        body:
          role_id: "{{ approle.role_id }}"
          secret_id: "{{ second_secret.secret_id }}"
    
    - name: Create third secret
      bbcrd.ansible_vault.vault_approle_secret:
        approle_name: "my-approle"
        parameters:
          metadata:
            note: "third secret"
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: third_secret
    
    - name: Check expected secrets exist
      uri:
        url: "{{ ansible_vault_public_url }}/v1/auth/approle/role/my-approle/secret-id"
        method: LIST
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
      register: list
      failed_when: |-
        (list.json.data["keys"] | sort)
        !=
        (
          [
            first_secret.secret_id_accessor,
            second_secret.secret_id_accessor,
            third_secret.secret_id_accessor,
          ] | sort
        )
    
    - name: Replace third secret based on metadata
      bbcrd.ansible_vault.vault_approle_secret:
        approle_name: "my-approle"
        parameters:
          metadata:
            note: "third secret"
        state: replaced
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: new_third_secret
    
    - name: Check third secret replaced
      uri:
        url: "{{ ansible_vault_public_url }}/v1/auth/approle/role/my-approle/secret-id"
        method: LIST
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
      register: list
      failed_when: |-
        (list.json.data["keys"] | sort)
        !=
        (
          [
            first_secret.secret_id_accessor,
            second_secret.secret_id_accessor,
            new_third_secret.secret_id_accessor,
          ] | sort
        )
    
    - name: Remove third secret
      bbcrd.ansible_vault.vault_approle_secret:
        approle_name: "my-approle"
        parameters:
          metadata:
            note: "third secret"
        state: absent
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
    
    - name: Check third secret removed
      uri:
        url: "{{ ansible_vault_public_url }}/v1/auth/approle/role/my-approle/secret-id"
        method: LIST
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
      register: list
      failed_when: |-
        (list.json.data["keys"] | sort)
        !=
        (
          [
            first_secret.secret_id_accessor,
            second_secret.secret_id_accessor,
          ] | sort
        )
    
    - name: Remove non-existing secret
      bbcrd.ansible_vault.vault_approle_secret:
        approle_name: "my-approle"
        parameters:
          metadata:
            note: "already absent secret"
        state: absent
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: result
      failed_when: result.changed
    
    - name: Replace all secrets
      bbcrd.ansible_vault.vault_approle_secret:
        approle_name: "my-approle"
        parameters:
          metadata:
            note: "only secret"
        state: singular
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: only_secret
    
    - name: Check all other secrets removed
      uri:
        url: "{{ ansible_vault_public_url }}/v1/auth/approle/role/my-approle/secret-id"
        method: LIST
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
      register: list
      failed_when: |-
        list.json.data["keys"] != [only_secret.secret_id_accessor]
    
    - name: Remove all secrets
      bbcrd.ansible_vault.vault_approle_secret:
        approle_name: "my-approle"
        state: absent
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
    
    - name: Check all secrets removed
      uri:
        url: "{{ ansible_vault_public_url }}/v1/auth/approle/role/my-approle/secret-id"
        method: LIST
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
        status_code: 404
    
    - name: Update when there are no secrets
      bbcrd.ansible_vault.vault_approle_secret:
        approle_name: "my-approle"
        state: singular
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
