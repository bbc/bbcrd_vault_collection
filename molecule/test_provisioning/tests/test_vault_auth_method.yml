---

- hosts: vault
  tasks:
    - import_tasks: ../load_credentials_and_reset_vault.yml
    
    - name: Delete nothing
      bbcrd.ansible_vault.vault_auth_method:
        type: oidc
        state: absent
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: result
      failed_when: result.changed
    
    - name: Create auth method
      bbcrd.ansible_vault.vault_auth_method:
        type: github
        mount: my_github
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: result
      failed_when: not result.changed
    
    - name: Check created as expected
      uri:
        url: "{{ ansible_vault_public_url }}/v1/sys/auth"
        method: GET
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
      register: initial_method
      failed_when: |-
        not (
            "my_github/" in initial_method.json.data and
            initial_method.json.data["my_github/"]["type"] == "github"
        )
    
    - name: No change if left same
      bbcrd.ansible_vault.vault_auth_method:
        type: github
        mount: my_github
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: result
      failed_when: result.changed
    
    - name: Make non-destructive change
      bbcrd.ansible_vault.vault_auth_method:
        type: github
        mount: my_github
        description: "Newly added description!"
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: result
      failed_when: not result.changed
    
    - name: Check change applied without destroying auth method
      uri:
        url: "{{ ansible_vault_public_url }}/v1/sys/auth"
        method: GET
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
      register: updated_method
      failed_when: |-
        updated_method.json.data["my_github/"]["description"] != "Newly added description!"
        or updated_method.json.data["my_github/"]["accessor"] != initial_method.json.data["my_github/"]["accessor"]
    
    - name: Make destructive change
      bbcrd.ansible_vault.vault_auth_method:
        type: userpass
        mount: my_github
        description: "Newly added description!"
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: result
      failed_when: not result.changed
    
    - name: Check change applied destructively
      uri:
        url: "{{ ansible_vault_public_url }}/v1/sys/auth"
        method: GET
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
      register: updated_method
      failed_when: |-
        updated_method.json.data["my_github/"]["accessor"] == initial_method.json.data["my_github/"]["accessor"]
    
    - name: Delete
      bbcrd.ansible_vault.vault_auth_method:
        mount: my_github
        state: absent
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: result
      failed_when: not result.changed
    
    - name: Check deleted
      uri:
        url: "{{ ansible_vault_public_url }}/v1/sys/auth"
        method: GET
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
      register: auth_methods
      failed_when: '"my_github/" in auth_methods.json.data'
    
    - name: Check auto-fill mount
      bbcrd.ansible_vault.vault_auth_method:
        type: userpass
        vault_url: "{{ ansible_vault_public_url }}"
        vault_token: "{{ ansible_vault_root_token }}"
      register: result
      failed_when: not result.changed
    
    - name: Check created
      uri:
        url: "{{ ansible_vault_public_url }}/v1/sys/auth"
        method: GET
        headers:
          X-Vault-Token: "{{ ansible_vault_root_token }}"
      register: auth_methods
      failed_when: '"userpass/" not in auth_methods.json.data'
