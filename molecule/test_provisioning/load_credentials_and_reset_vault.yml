# A series of tasks to execute to load the ansible_vault_root_token and
# ansible_vault_unseal_keys and reset vault into a pristine empty and unsealed
# state.

- name: Load vault credentials
  slurp:
    src: "/vault_credentials"
  register: vault_credentials_slurp

- name: Unpack vault credentials
  set_fact:
    ansible_vault_unseal_keys: "{{ (vault_credentials_slurp['content'] | b64decode | from_json)['keys_base64'] }}"
    ansible_vault_root_token: "{{ (vault_credentials_slurp['content'] | b64decode | from_json)['root_token'] }}"

- name: Check if vault is sealed
  uri:
    # vault status
    url: "{{ ansible_vault_public_url }}/v1/sys/seal-status"
  retries: 5
  delay: 5
  until: vault_status.status == 200  # i.e. connection successful
  register: vault_status

- name: Unseal vault
  when: vault_status.json.sealed
  uri:
    # vault operator unseal
    url: "{{ ansible_vault_public_url }}/v1/sys/unseal"
    method: POST
    body_format: json
    body:
      key: "{{ ansible_vault_unseal_keys[0] }}"
  changed_when: true
  register: vault_unseal
  failed_when: vault_unseal.json.sealed

- name: Restore to snapshot of pristine state 
  uri:
    # vault operator raft snapshot restore /vault_snapshot
    url: "{{ ansible_vault_public_url }}/v1/sys/storage/raft/snapshot"
    method: POST
    src: "/vault_snapshot"
    remote_src: true
    status_code: [200, 204]
    headers:
      X-Vault-Token: "{{ ansible_vault_root_token }}"
  changed_when: true
